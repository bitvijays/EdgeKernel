* Redis
https://www.datadoghq.com/pdf/Understanding-the-Top-5-Redis-Performance-Metrics.pdf
Faster than other schema-less NoSQL databases such as MongoDB
Designed as a simple Cache
Due to in-memory focus, faster than traditional disk-based DBs

Persistance offered by:
    1. snapshots
    2. append-only file

*** Snapshots
Point-in-time images of in-memory data
Forks/Creates an in-memory copy of current data in memory
Stores to disk
Data changed between snapshots at risk of being lost -> frequent snapshots

*** Append-Only File (AOF)
Every change in memory is written to disk

Tradeoff as this guarentees persistance at the cost of performance

** Storage Formats

Redis can store:
    1. strings
    2. list of strings
    3. sets
    4. sorted sets
    5. hashes

Redis Hashes are useful as they are compact and memory efficient

Redis Scales with ease

* Memcached

Open Sourced, in-memory, multithreaded kv store
Good when no persistance needed and only storing strings
Simple and powerful when caching
Performs best with simple data structures
Can perform better or worse than Redis depending on use-cases



https://medium.com/@Alibaba_Cloud/redis-vs-memcached-in-memory-data-storage-systems-3395279b0941
Redis supports server-end data operations
Memcached has to copy data to client -> increased IO throughput
Memcached has higher memory utilisation....unless Redis uses hash structure
Memcached outperforms Redis on Big Data
Memcached has only supports simple KV structure

** Memcached: Slab Allocation
Segment memory into allocated chunks of specific length
Chunk size determined by the data it stores
Chunks increased in size by a growth-factor
May be inefficient


https://aws.amazon.com/elasticache/redis-vs-memcached/
Redis offers everything Memcached has (except multithreaded architecture) and more

* Conclusion
Redis wins.
